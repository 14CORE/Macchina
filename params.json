{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"This is my experimentation about reverse engineering the Native Instruments Maschine.\r\n\r\nThe Maschine is a combination of a rhythm oriented software sampler, and a custom USB\r\nhardware controller that exposes most of the software features.\r\n\r\nState of the project\r\n--------------------\r\n\r\nEverything you see here is \"proof of concept\"-stage. Everything in this repository is\r\nmeant for my entertainment purposes only, and it is **NOT** stable software.\r\n\r\nIf you want, however, you can have the same fun I am having in working with this fun piece\r\nof hardware, even when you're not in a music-making mood.\r\n\r\nCurrently with code contained in this repository you can connect to the Maschine USB\r\ncontroller, get the raw input of pads, knobs and switches, and set the state of the leds\r\nand, _yes_, upload images to the device's displays.\r\n\r\nOne part that I've completely neglected in order to work on the fun part first is error\r\nhandling and graceful termination. That means that frequent reboots of the various\r\nservices are required, to get your system in a stable and predictable state.\r\n\r\nPatches and pull-requests are always welcome, of course =).\r\n\r\nOther hardware controllers\r\n--------------------------\r\n\r\nIt just happened that I had a Maschine laying around, but from my experimentation it seems\r\nthat a lot of this work can be used to support any other Native Instruments hardware, with\r\nthe required modifications.\r\n\r\nIf you want, you can send me your favorite controller and I'll try to make it work ;).\r\n\r\nSmall showoff\r\n-------------\r\n\r\n<iframe width=\"480\" height=\"360\" src=\"http://www.youtube-nocookie.com/embed/yJNg-mZQh4E?rel=0\" frameborder=\"0\" allowfullscreen>\r\n</iframe>\r\n\r\nOrganization of the project\r\n---------------------------\r\n\r\nThe project is intended to run in Mac OS X only.\r\n\r\nIn the Xcode project you can find two targets:\r\n\r\n- MacchinaClient, and\r\n- MacchinaServer.\r\n\r\nThis reflects the organization of the Native Instrument's original software.\r\n\r\nMacchinaClient is a Mac commandline application that connects to the NIHardwareAgent\r\ndaemon, waits for a Maschine controller to focus on it's instance, and then light up some\r\nleds and log the incoming messages.\r\n\r\nMacchinaServer, on the other end, is its dual. This application will expose to clients the\r\nsame interface of NIHardwareAgent, and it will do the minimum in order to let clients such\r\nas the Maschine standalone or Maschine plugins, or even the Controller Editor to connect\r\nand log their requests.\r\n\r\nRunning the project\r\n-------------------\r\n\r\nAs I said, currently this is a proof of concept. If you don't understand this paragraph\r\n(and you can exclude it is not because of my english) I advise you to stop. My Maschine\r\ndidn't fry up, but I have just some knowledge of what I am doing.\r\n\r\n### To run MacchinaClient (and enjoy a bit of light show)\r\n\r\n1. Open the project in Xcode\r\n2. Select the client from the Scheme menu\r\n3. Make sure NIHardwareAgent is running\r\n\r\n    Selena:~ willy$ ps ax | grep NIHardwareAgent\r\n    13487 s001  U      0:01.24 /Library/Application Support/Native\r\nInstruments/Hardware/NIHardwareAgent.app/Contents/MacOS/NIHardwareAgent\r\n    13491 s001  R+     0:00.00 grep NIHardwareAgent\r\n    Selena:~ willy$ \r\n\r\n4. Run the target\r\n5. Close anything that might use your Maschine\r\n6. If it was not connected, connect the Maschine hardware controller\r\n7. In the Maschine controller, open the Instance menu and load it\r\n\r\n### To run MacchinaServer (and take a look under the hood)\r\n\r\n1. Close anything that might use your Maschine, or any other Native Instrument controller\r\n2. Make sure NIHardwareAgent is **NOT** running\r\n3. In Xcode, select the server from the scheme menu\r\n4. Run the target\r\n5. Open some application that uses the Native Instrument controller\r\n6. Check the MacchinaServer logs for the detailed information on the underlying\r\n   communication\r\n\r\nLegal\r\n-----\r\n\r\nBasically, you can do whatever you like with my works. Just do not expect they're perfect\r\n(they're far from it), so I can't give you any warranty of anything. Also, if you want to\r\nuse my works in *your* work, I'd love to see it, but of course I can't force people to\r\nhave my same choices, so I won't.\r\n\r\nSo, the software in this repository is released under the MIT license, of which you can\r\nfind a copy at the end of this document.\r\n\r\nLicense\r\n-------\r\n\r\nCopyright (c) 2012 Antonio Malara\r\n\r\nPermission is hereby granted, free of charge, to any person\r\nobtaining a copy of this software and associated documentation\r\nfiles (the \"Software\"), to deal in the Software without\r\nrestriction, including without limitation the rights to use,\r\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the\r\nSoftware is furnished to do so, subject to the following\r\nconditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\r\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\nOTHER DEALINGS IN THE SOFTWARE.\r\n\r\nCease and desist\r\n----------------\r\n\r\nIf you, however, are a representative of Native Instruments particularly offended and\r\nbothered with my tinkering with my stuff developed by you, just send me a friendly note.\r\n\r\nLife is short to deal with litigations.\r\n","name":"Macchina","google":"UA-27464081-2 ","tagline":"My experiments on reverse-engineering the Native Instruments Maschine hardware controller"}